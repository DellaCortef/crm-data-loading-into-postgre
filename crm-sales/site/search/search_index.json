{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>               Bases: <code>BaseModel</code></p> <p>Sales data model</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>EmailStr</code> <p>email of seller</p> required <code>date_time(datetime)</code> <p>date and time of purchase</p> required <code>product_value(PositiveFloat)</code> <p>value of purchase</p> required <code>product_quantity(PositiveInt)</code> <p>quantity of purchase</p> required <code>product_type(ProductEnum)</code> <p>category of product</p> required Source code in <code>contract.py</code> <pre><code>class Sales(BaseModel):\n    \"\"\"\n    Sales data model\n\n    Args:\n        email (EmailStr): email of seller\n        date_time(datetime): date and time of purchase\n        product_value(PositiveFloat): value of purchase\n        product_quantity(PositiveInt): quantity of purchase\n        product_type(ProductEnum): category of product\n    \"\"\"\n\n    email: EmailStr\n    date_time: datetime\n    product_value: PositiveFloat\n    product_quantity: PositiveInt\n    product_type: ProductEnum\n\n    @validator('date_time')\n    def validate_date_interval(cls, v):\n        # Define the allowed date range\n        interval_start = datetime(2024, 9, 1)  # 01/09/2024\n        interval_end = datetime(2024, 9, 12, 23, 59, 59)  # 12/09/2024 until 23:59:59\n\n        # Checks if the date is within the allowed range\n        if not (interval_start &lt;= v &lt;= interval_end):\n            raise ValueError(\"The date of sale must be between 09/01/2024 and 09/12/2024\")\n        return v\n\n    @validator('product_type')\n    def category_must_be_in_the_enum(cls, v):\n        return v\n</code></pre> <p>\" Function to save in Postgre</p> Source code in <code>database.py</code> <pre><code>def load_into_postgre(dados: Sales):\n    \"\"\"\"\n    Function to save in Postgre    \n    \"\"\"\n    try:\n        conn = psycopg2.connect(\n            host=DB_HOST,\n            database=DB_NAME,\n            user=DB_USER,\n            password=DB_PASS\n        )\n        cursor = conn.cursor()\n\n        # Inserting data into the sales table\n        insert_query = sql.SQL(\n            \"INSERT INTO sales (email, date_time, product_value, product_quantity, product_type) VALUES (%s, %s, %s, %s, %s)\"\n        )\n        cursor.execute(insert_query, (\n            dados.email,\n            dados.date_time,\n            dados.product_value,\n            dados.product_quantity,\n            dados.product_type\n        ))\n        conn.commit()\n        cursor.close()\n        conn.close()\n        st.success(\"Data successfully saved in Postgre\")\n    except Exception as e:\n        st.error(f\"Error saving data in Postgre: {e}\")\n</code></pre>"}]}